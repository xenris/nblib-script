#!/bin/bash

# TODO Create a different name for this script.

# TODO Move avrdude file in nblib-template-project to avrtools

# Script for creating, compiling, and managing nblib based projects.

set -e

versionId="0.1"

function showHelp() {
    echo "Available commands:"
    echo "    create <name> -> Creates a new project with the given name."
    echo "    build         -> Compile the code."
    echo "    clean         -> Delete output files, such as objects and binarys."
    echo "    upload [port] -> Compile the code and write it to a connected microcontroller. Will guess the port if not provided."
    echo "    update        -> Update the nblib library in the current project."
    echo "    serial [port] -> Open a terminal to a serial port. Will guess the port if not provided."
    echo "    version       -> Show the script version."
    echo "    help          -> Show this help message"
    echo "nblib (version $versionId)"
}

if [[ -e lib/nblib/ ]]; then
    source ./build.config
fi

if [[ -n $avrtools ]]; then
    export PATH="$PATH:$avrtools/usr/local/bin/"
fi

if [[ $# == 0 ]]; then
    showHelp
    exit
fi

function checkForProject() {
    if [[ ! -e lib/nblib/ ]]; then
        echo "Error: Not an nblib project"
        exit -1
    fi
}

function showVersion() {
    echo $versionId
}

function createProject() {
    # TODO Check that project name is valid.

    if [[ -z $1 ]]; then
        echo "Error: No project name given. See '$0 --help'"
        exit -1
    fi

    if [[ ! -e $1 || ! $(ls -A $1) ]]; then
        tempFile=`mktemp`

        curl -s -L https://github.com/xenris/nblib-project-template/archive/master.zip -o $tempFile

        unzip -q -d $1 $tempFile

        cd $1

        shopt -s dotglob
        mv nblib-project-template-master/* ./

        rmdir nblib-project-template-master

        rm $tempFile

        touch .nblib_project

        tup init

        git init

        rmdir lib/nblib/

        git submodule add https://github.com/xenris/nblib.git lib/nblib

        echo "New project '$1' created"
    else
        echo "Error: Directory '$1' already exists and is not empty"
        exit -1
    fi
}

function buildProject() {
    checkForProject

    elf="gen/firmware.elf"

    if [[ "$mcu" =~ ^at.* ]]; then
        arch="avr"
        mmcu=$mcu
    elif [[ "$mcu" =~ ^stm32f1.* ]]; then
        arch="arm"
        mmcu="cortex-m3"
    else
        echo "Error: Unknown mcu"
        exit -1
    fi

    echo "-ffreestanding" > .clang_complete
    echo "-Dexternally_visible=used" >> .clang_complete
    echo "-Dsignal=used" >> .clang_complete
    echo "-D__${mcu}__" >> .clang_complete
    echo "-std=c++20" >> .clang_complete

    for p in $(ls lib); do
        echo "-Ilib/$p/src/" >> .clang_complete
    done

    PATHS=$(find src/ lib/*/src/ -name '*.c' -o -name '*.cpp' -o -name '*.S')

    echo "arch = $arch" > Tupresources
    echo "mmcu = $mmcu" >> Tupresources
    echo "CFLAGS += -D__${mcu}__" >> Tupresources

    for p in $(ls lib); do
        echo "CFLAGS += -Ilib/$p/src/" >> Tupresources
    done

    for p in $PATHS; do
        echo "SRC_FILES += $p" >> Tupresources
    done

    echo "-----------------------------------"
    echo "Building"
    echo "-----------------------------------"

    tup

    rm Tupresources

    case $arch in
    avr )
        echo "-----------------------------------"
        echo "AVR Memory Usage"
        echo "-----------------------------------"

        avr-objdump -Pmem-usage $elf | tail -n +5 | head -n -2
        ;;
    arm )
        arm-none-eabi-size $elf
        ;;
    esac
}

function cleanProject() {
    checkForProject

    fileList=$(find . -name '*.o' -o -name '*.hex' -o -name '*.elf' -o -name '*.asm' -o -name '*.bin')

    if [[ -n $fileList ]]; then
        if [[ "$1" == "-f" ]]; then
            echo rm $fileList
            rm $fileList
        else
            echo "Files to delete:"
            echo "$fileList"
            echo "Use '-f' to delete these files"
        fi
    else
        echo "Project already clean"
    fi
}

# TODO This might actually be a bad idea, as sending data to a random port may not be good.
# Think about removing this...?
function findPort() {
    echo $(ls -d /dev/* | grep -E 'tty(ACM|USB)' | head -n 1)
}

function uploadAvrProject() {
    checkForProject

    hex="gen/firmware.hex"

    case $programmer in
    usbasp )
        port="usb"
        ;;
    * )
        port=$1

        if [[ -z $port ]]; then port=$upload_port; fi

        if [[ -z $port ]]; then port=$(findPort); fi

        if [[ -z $port ]]; then
            echo "Error: Can't find upload port."
            exit -1
        fi
        ;;
    esac

    if [[ "$programmer" == "updi" ]]; then
        # TODO
        echo pyupdi.py -d $mmcu -c $upload_port [-e] [-b $upload_baud] [-f FLASH] [-r] [-i] [-fs [FUSES [FUSES ...]]] [-fr] [-v]
    else
        if [[ -n $disableAutoErase ]]; then disableAutoErase='-D'; fi

        if [[ -n $upload_baud ]]; then upload_baud="-b $upload_baud"; fi

        if [[ -n $bitclock ]]; then bitclock="-B $bitclock"; fi

        avrdude $bitclock $upload_baud -p $mmcu -P $port -c $programmer $disableAutoErase -U flash:w:$hex
    fi
}

function uploadArmProject() {
    # TODO Check if address needs to change in some cases.
    st-flash --reset write $bin 0x08000000
}

function uploadProject() {
    buildProject

    echo "-----------------------------------"
    echo "Uploading"
    echo "-----------------------------------"

    case $arch in
    avr )
        uploadAvrProject $1
        ;;
    arm )
        uploadArmProject
        ;;
    * )
        echo default
        ;;
    esac
}

function updateLib() {
    checkForProject

    # TODO pull nblib changes
    echo update
}

function openSerial() {
    port=$1

    if [[ -z $port ]]; then port=$serial_port; fi

    if [[ -z $port ]]; then port=$(findPort); fi

    if [[ -z $port ]]; then
        echo "Error: Can't find serial port."
        exit -1
    fi

    echo "-----------------------------------"
    echo "Serial - Exit with ctrl+a -> ctrl+x"
    echo "-----------------------------------"

    if [[ -z $serial_baud ]]; then serial_baud=115200; fi

    picocom --imap lfcrlf --omap crlf --baud $serial_baud $port
}

case $1 in
version )
    showVersion
    ;;
create )
    createProject $2
    ;;
build )
    buildProject
    ;;
clean )
    cleanProject $2
    ;;
upload )
    uploadProject $2
    ;;
update )
    updateLib
    ;;
serial )
    openSerial $2
    ;;
help | --help | -h | -help )
    showHelp
    ;;
* )
    echo "Unknown command: '$1'. See '$0 --help'."
    ;;
esac;
