#!/bin/bash

# TODO Move avrdude file in nblib-template-project to avrtools

# Script for creating, compiling, and uploading nblib based projects.

set -e

versionId="0.2"

function showHelp() {
    echo "Available commands:"
    echo "  create <name> -> Creates a new project with the given name."
    echo "  build         -> Compile the code."
    echo "  clean         -> Delete output files, such as objects and binarys."
    echo "  upload [port] -> Compile the code and write it to a connected microcontroller."
    echo "  serial [port] -> Open a terminal to a serial port."
    echo "  version       -> Show the script version."
    echo "  help          -> Show this help message."
    echo "nblib (version $versionId)"
}

if [[ -e nblib.config ]]; then
    source nblib.config
fi

if [[ -n $avrtools ]]; then
    export PATH="$PATH:$avrtools/usr/local/bin/"
fi

if [[ $# == 0 ]]; then
    showHelp
    exit -1
fi

function checkForProject() {
    if [[ ! -e nblib.config ]]; then
        echo "Error: Not an nblib project."
        exit -1
    fi
}

function showVersion() {
    echo $versionId
}

function createProject() {
    if [[ -z $1 ]]; then
        echo "Error: No project name given."
        exit -1
    fi

    if [[ ! -e $1 || ! $(ls -A $1) ]]; then
        mkdir -p $1

        cd $1

        curl -L https://github.com/xenris/nblib-project-template/archive/master.zip -o master.zip

        unzip -q master.zip
        rm master.zip

        shopt -s dotglob
        mv nblib-project-template-master/* ./
        rmdir nblib-project-template-master

        git init

        rmdir lib/nblib/

        git submodule add https://github.com/xenris/nblib.git lib/nblib

        echo "New project '$1' created."
    else
        echo "Error: Directory '$1' already exists and is not empty."
        exit -1
    fi
}

function buildProject() {
    checkForProject

    echo "-----------------------------------"
    echo "Building"
    echo "-----------------------------------"

    elf="gen/firmware.elf"

    if [[ "$mcu" =~ ^at.* ]]; then
        arch="avr"
        mmcu=$mcu
    elif [[ "$mcu" =~ ^stm32f1.* ]]; then
        arch="arm"
        mmcu="cortex-m3"
    else
        echo "Error: Unknown mcu."
        exit -1
    fi

    echo "-ffreestanding" > .clang_complete
    echo "-Dexternally_visible=used" >> .clang_complete
    echo "-Dsignal=used" >> .clang_complete
    echo "-D__${mcu}__" >> .clang_complete
    echo "-std=c++20" >> .clang_complete

    for p in $(ls lib); do
        echo "-Ilib/$p/src/" >> .clang_complete
    done

    PATHS=$(find src/ lib/*/src/ -name '*.c' -o -name '*.cpp' -o -name '*.S')

    echo "arch = $arch" > Tuprules.tmp
    echo "mmcu = $mmcu" >> Tuprules.tmp
    echo "CFLAGS += -D__${mcu}__" >> Tuprules.tmp

    for p in $(ls lib); do
        echo "CFLAGS += -Ilib/$p/src/" >> Tuprules.tmp
    done

    for p in $PATHS; do
        echo "SRC_FILES += $p" >> Tuprules.tmp
    done

    if [[ ! -e .tup ]]; then
        tup init
    fi

    tup

    rm Tuprules.tmp

    case $arch in
    avr )
        echo "-----------------------------------"
        echo "AVR Memory Usage"
        echo "-----------------------------------"

        avr-objdump -Pmem-usage $elf | tail -n +5 | head -n -2
        ;;
    arm )
        arm-none-eabi-size $elf
        ;;
    esac
}

function cleanProject() {
    checkForProject

    fileList=$(find . -name '*.o' -o -name '*.hex' -o -name '*.elf' -o -name '*.asm' -o -name '*.bin')

    if [[ -n $fileList ]]; then
        if [[ "$1" == "-f" ]]; then
            for file in $fileList; do
                echo "rm $file"
                rm $file
            done
        else
            echo "Files to delete:"

            for file in $fileList; do
                echo "  $file"
            done

            echo "Use '-f' to delete these files."
        fi
    else
        echo "Project already clean."
    fi
}

function findPort() {
    echo $(ls -d /dev/* | grep -E 'tty(ACM|USB)' | head -n 1)
}

function uploadAvrFirmware() {
    checkForProject

    hex="gen/firmware.hex"

    case $programmer in
    usbasp )
        port="usb"
        ;;
    * )
        port=$1

        if [[ -z $port ]]; then port=$upload_port; fi

        if [[ -z $port || $port == "auto" ]]; then port=$(findPort); fi

        if [[ -z $port ]]; then
            echo "Error: Can't find port to upload to."
            exit -1
        fi
        ;;
    esac

    if [[ -n $upload_baud ]]; then upload_baud="-b $upload_baud"; fi

    if [[ "$programmer" == "updi" ]]; then
        echo pyupdi.py -d $mmcu -c $port -b $upload_baud -f $hex
    else
        if [[ -n $disableAutoErase ]]; then disableAutoErase='-D'; fi

        if [[ -n $bitclock ]]; then bitclock="-B $bitclock"; fi

        avrdude $bitclock $upload_baud -p $mmcu -P $port -c $programmer $disableAutoErase -U flash:w:$hex
    fi
}

function uploadArmFirmware() {
    # TODO Check if address needs to change in some cases.
    st-flash --reset write $bin 0x08000000
}

function uploadFirmware() {
    buildProject

    echo "-----------------------------------"
    echo "Uploading"
    echo "-----------------------------------"

    case $arch in
    avr )
        uploadAvrFirmware $1
        ;;
    arm )
        uploadArmFirmware
        ;;
    * )
        echo default
        ;;
    esac
}

function openSerial() {
    port=$1

    if [[ -z $port ]]; then port=$serial_port; fi

    if [[ -z $port || $port == "auto" ]]; then port=$(findPort); fi

    if [[ -z $port ]]; then
        echo "Error: Can't find serial port."
        exit -1
    fi

    echo "-----------------------------------"
    echo "Serial - Exit with ctrl+a -> ctrl+x"
    echo "-----------------------------------"

    if [[ -z $serial_baud ]]; then serial_baud=115200; fi

    picocom --imap lfcrlf --omap crlf --baud $serial_baud $port
}

case $1 in
version )
    showVersion
    ;;
create )
    createProject $2
    ;;
build )
    buildProject
    ;;
clean )
    cleanProject $2
    ;;
upload )
    uploadFirmware $2
    ;;
serial )
    openSerial $2
    ;;
help | --help | -h | -help )
    showHelp
    ;;
* )
    echo "Error: Unknown command '$1'."
    ;;
esac;
