#!/bin/bash

# TODO Create a different name for this script.

# Script for creating, compiling, and managing nblib based projects.

set -e

versionId="0.1"

helpMessage="\
Available commands:
    create <name> -> Creates a new project with the given name.
    build -> Compile the code.
    clean -> Delete output files, such as objects and binarys.
    upload -> Compile the code and write it to a connected microcontroller.
    memory -> Show the memory use in the microcontroller.
    update -> Update the nblib library in the current project.
    serial [port] -> Open a terminal to a serial port. Will guess the port if not given.
    version -> Show the script version.
    help -> Show this help message
$0 version $versionId"

arch="avr" # TODO Get from config script.

elf="gen/firmware.elf"

if [[ "$#" == "0" ]]; then
    echo "$helpMessage"
    exit
fi

function checkForProject() {
    if [[ ! -e ".nblib_project" ]]; then
        echo "Error: Not an nblib project"
        exit -1
    fi
}

function showVersion() {
    echo $versionId
}

function createProject() {
    # dir=$1
    # dir=${dir//<}
    # dir=${dir//>}

    if [[ -z $1 ]]; then
        echo "Error: No project name given. See '$0 --help'"
        exit -1
    fi

    if [[ ! -e $1 || ! $(ls -A $1) ]]; then
        tempFile=`mktemp`

        curl -s -L https://github.com/xenris/nblib-project-template/archive/master.zip -o $tempFile

        unzip -q -d $1 $tempFile

        cd $1

        shopt -s dotglob
        mv nblib-project-template-master/* ./

        rmdir nblib-project-template-master

        rm $tempFile

        touch .nblib_project

        tup init

        git init

        # TODO Remove /lib/nblib from project template.

        git submodule add https://github.com/xenris/nblib.git lib/nblib

        echo "New project '$1' created"
    else
        echo "Error: Directory '$1' already exists and is not empty"
        exit -1
    fi
}

function showMemoryUse() {
    checkForProject

    case $arch in
    avr)
        avr-objdump -Pmem-usage $elf | tail -n +3 | head -n -2
        echo "----------------"
        ;;
    arm)
        arm-none-eabi-size $elf
        ;;
    esac
}

function buildProject() {
    checkForProject

    source ./build.config

    if [[ "$mcu" =~ ^at.* ]]; then
        arch="avr"
        mmcu=$mcu
    elif [[ "$mcu" =~ ^stm32f1.* ]]; then
        arch="arm"
        mmcu="cortex-m3"
    else
        echo "Error: Unknown mcu"
        exit -1
    fi

    # TODO generate extra files. e.g. .clang_complete (Although, maybe this could be built in to the Tupfile?)

    echo "-I./lib/nblib/src" > .clang_complete
    echo "-ffreestanding" >> .clang_complete
    echo "-Dexternally_visible=used" >> .clang_complete
    echo "-Dsignal=used" >> .clang_complete
    echo "-D__${mcu}__" >> .clang_complete
    echo "-std=c++20" >> .clang_complete

    PATHS=$(find src/ lib/*/src/ -name '*.c' -o -name '*.cpp' -o -name '*.S')

    # rm -f Tupresources

    echo "arch = $arch" > Tupresources
    echo "mmcu = $mmcu" >> Tupresources
    echo "CFLAGS += -D__${mcu}__" >> Tupresources

    for p in $PATHS; do
        echo "SRC_FILES += $p" >> Tupresources
    done

    tup

    echo ""

    showMemoryUse
}

function cleanProject() {
    checkForProject

    fileList=$(find . -name '*.o' -o -name '*.hex' -o -name '*.elf' -o -name '*.asm' -o -name '*.bin')

    if [[ -n $fileList ]]; then
        if [[ "$1" == "-f" ]]; then
            echo rm $fileList
            rm $fileList
        else
            echo "Files to delete:"
            echo "$fileList"
            echo "Use '-f' to delete these files"
        fi
    else
        echo "Project already clean"
    fi
}

function uploadProject() {
    buildProject

    echo ""

    port=$1

    if [[ -z $port ]]; then
        port=$(ls /dev/ | grep -E 'tty(ACM|USB)' | head -n 1)

        if [[ -z $port ]]; then
            echo "Error: Can't find upload port"
            exit -1
        fi
    fi

    echo "upload to $port"

    # TODO Check what type of programmer is set in the config to determine upload method.
}

function updateLib() {
    checkForProject

    echo update
}

function openSerial() {
    port=$1

    if [[ -z $port ]]; then
        # TODO Guess which port to use.
        port="undefined"
    fi

    echo "picocom $port"
}

function showHelp() {
    echo "$helpMessage"
}

case $1 in
version )
    showVersion
    ;;
create )
    createProject $2
    ;;
build )
    buildProject
    ;;
clean )
    cleanProject $2
    ;;
upload )
    uploadProject $2
    ;;
memory )
    showMemoryUse
    ;;
update )
    updateLib
    ;;
serial )
    openSerial $2
    ;;
help | --help | -h | -help )
    showHelp
    ;;
* )
    echo "Unknown command: '$1'. See '$0 --help'."
    ;;
esac;
